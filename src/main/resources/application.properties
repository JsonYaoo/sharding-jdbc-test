# Sharding JDBC数据源配置
spring.shardingsphere.datasource.names=ds0,slave0,ms1

# 实际数据源1配置
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbcUrl=jdbc:mysql://192.168.1.142:3306/sharding_order
spring.shardingsphere.datasource.ds0.username=imooc
spring.shardingsphere.datasource.ds0.password=Imooc@123456

# 实际从数据源1.1配置
spring.shardingsphere.datasource.slave0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.slave0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.slave0.jdbcUrl=jdbc:mysql://192.168.1.141:3306/sharding_order
spring.shardingsphere.datasource.slave0.username=imooc
spring.shardingsphere.datasource.slave0.password=Imooc@123456


# 实际数据源2配置
spring.shardingsphere.datasource.ms1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ms1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ms1.jdbcUrl=jdbc:mysql://192.168.1.143:3306/shard_order
spring.shardingsphere.datasource.ms1.username=imooc
spring.shardingsphere.datasource.ms1.password=Imooc@123456

# 读写分离配置
spring.shardingsphere.sharding.master-slave-rules.ms0.master-data-source-name=ds0
spring.shardingsphere.sharding.master-slave-rules.ms0.slave-data-source-names=slave0
spring.shardingsphere.sharding.master-slave-rules.ms0.load-balance-algorithm-type=RANDOM

# 逻辑表与分片规则配置
#spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ms$->{0..1}.t_order_$->{1..2}
#spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=ms$->{user_id % 2}
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 2 + 1}

# 主键生成策略: 配置逻辑表与分片规则配置
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ms$->{0..1}.t_order_$->{1..2}
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=ms$->{user_id % 2}
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
#spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.precise-algorithm-class-name=com.jsonyao.shardingjdbc.sharding.MySharding
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.precise-algorithm-class-name=com.jsonyao.shardingjdbc.sharding.MySnowFlakeSharding
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
#spring.shardingsphere.sharding.tables.t_order.key-generator.type=UUID
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.t_order.key-generator.props.worker.id=345
spring.shardingsphere.sharding.tables.t_order.key-generator.props.max.tolerate.time.difference.milliseconds=10

## 绑定表(子表)配置与分片规则配置
#spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ms$->{0..1}.t_order_item_$->{1..2}
#spring.shardingsphere.sharding.tables.t_order_item.database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.tables.t_order_item.database-strategy.inline.algorithm-expression=ms$->{user_id % 2}
#spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.sharding-column=order_id
#spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression=t_order_item_$->{order_id % 2 + 1}

## 主键生成策略: 绑定表(子表)逻辑表与分片规则配置
spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ms$->{0..1}.t_order_item_$->{1..2}
spring.shardingsphere.sharding.tables.t_order_item.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_order_item.database-strategy.inline.algorithm-expression=ms$->{user_id % 2}
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.standard.sharding-column=order_id
#spring.shardingsphere.sharding.tables.t_order_item.table-strategy.standard.precise-algorithm-class-name=com.jsonyao.shardingjdbc.sharding.MySharding
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.standard.precise-algorithm-class-name=com.jsonyao.shardingjdbc.sharding.MySnowFlakeSharding
spring.shardingsphere.sharding.tables.t_order_item.key-generator.column=order_id
#spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=UUID
spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.t_order_item.key-generator.props.worker.id=345
spring.shardingsphere.sharding.tables.t_order_item.key-generator.props.max.tolerate.time.difference.milliseconds=10

## 绑定表(子表)配置
spring.shardingsphere.sharding.binding-tables=t_order,t_order_item

# 广播表(全局表)配置
spring.shardingsphere.sharding.broadcast-tables=area

# MyBatis Mapper位置配置
mybatis.mapper-locations=/mybatis/*.xml